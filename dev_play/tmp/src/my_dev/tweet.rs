// DO NOT MODIFY AUTO-GENERATED BY PB-WALKER
use mysql_async::prelude::*;
use mysql_async::{FromRowError, OptsBuilder, Params, Row, Pool};
use mysql_common::row::ColumnIndex;

use mysql_common::value::Value;
use crate::mysql_shared::*;

#[derive(Default, Clone, PartialEq, Eq, Debug)]
pub struct Tweet  { // tweet
    pub tweet_id: u64,
    pub user_id: u32,
    pub created_time: u64,
    pub text_body: String,
}

impl FromRow for Tweet {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Tweet  {
            tweet_id: row.get(0).unwrap_or_default(),
            user_id: row.get(1).unwrap_or_default(),
            created_time: row.get(2).unwrap_or_default(),
            text_body: row.get(3).unwrap_or_default(),
        })
    }
}

impl Tweet {
    pub async fn insert(&self, spool: &SPool) -> Result<Tweet,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"INSERT INTO {:}.tweet (user_id, created_time, text_body) VALUES (?, ?, ?)",&spool.database);
        let p = Params::Positional(vec![self.user_id.clone().into(), self.created_time.clone().into(), self.text_body.clone().into()]);

        let qr = conn.exec_iter(
            query, p
        ).await?;

        let mut cp = self.clone();
        cp.tweet_id = qr.last_insert_id().unwrap() as u64;
        Ok(cp)
    }


    // todo add replace with coping insert after it's complete

    pub async fn update(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;
        let query = format!(r"UPDATE `{:}`.tweet` SET user_id = ?, created_time = ?, text_body = ? WHERE tweet_id = ? ", &spool.database);
        let p = Params::Positional(vec![self.user_id.clone().into(), self.created_time.clone().into(), self.text_body.clone().into(), self.tweet_id.clone().into() ]);

        let qr = conn.exec_iter(
            query, p
        ).await?;

        Ok(())
    }

    pub async fn delete(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"DELETE FROM `{:}`.tweet` WHERE tweet_id = ? ", &spool.database);
        let p = Params::Positional(vec![self.tweet_id.clone().into()]);

        conn.exec_drop(
            query, p
        ).await?;

        Ok(())
    }
}


#[derive(Default, Debug)]
pub struct TweetSelector {
    q: TQuery
}

impl TweetSelector {
    pub fn new() -> Self {
        TweetSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.q.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_tweet_id(&mut self) -> &mut Self {
        self.q.select_cols.push("tweet_id");
        self
    }
    
    pub fn select_user_id(&mut self) -> &mut Self {
        self.q.select_cols.push("user_id");
        self
    }
    
    pub fn select_created_time(&mut self) -> &mut Self {
        self.q.select_cols.push("created_time");
        self
    }
    
    pub fn select_text_body(&mut self) -> &mut Self {
        self.q.select_cols.push("text_body");
        self
    }
    

    pub async fn _get_rows_with_size(&mut self, session: &SPool, size: i64) -> Result<Vec<Tweet>, MyError>   {
        let mut conn = session.pool.get_conn().await?;
        let(cql_query, query_values) = self.q._to_sql_selector();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(
                cql_query,p,
                |obj: Tweet| obj
            ).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &SPool) -> Result<Vec<Tweet>, MyError>{
        self._get_rows_with_size(session,-1).await
    }

    pub async fn get_row(&mut self, session: &SPool) -> Result<Tweet, MyError>{
        let rows = self._get_rows_with_size(session,1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound)
        }
    }

    // Modifiers
    
    pub fn order_by_tweet_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id ASC");
        self
    }

	pub fn order_by_tweet_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id DESC");
        self
    }

    pub fn order_by_user_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id ASC");
        self
    }

	pub fn order_by_user_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id DESC");
        self
    }

    pub fn order_by_created_time_asc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time ASC");
        self
    }

	pub fn order_by_created_time_desc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time DESC");
        self
    }

    pub fn order_by_text_body_asc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body ASC");
        self
    }

	pub fn order_by_text_body_desc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body DESC");
        self
    }

    
    pub fn tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Updater

#[derive(Default, Debug)]
pub struct TweetUpdater {
    q: TQuery
}

impl TweetUpdater {
    pub fn new() -> Self {
        TweetUpdater::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    //each column delete
    pub fn set_tweet_id(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("tweet_id",val.into());
        self
    }
    
    pub fn set_user_id(&mut self, val :u32) -> &mut Self {
        self.q.updates.insert("user_id",val.into());
        self
    }
    
    pub fn set_created_time(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("created_time",val.into());
        self
    }
    
    pub fn set_text_body(&mut self, val :&str) -> &mut Self {
        self.q.updates.insert("text_body",val.into());
        self
    }
    

    pub async fn update(&mut self, session: &SPool) -> Result<(),MyError> {
        update_rows(&self.q, session).await
    }

    
    pub fn order_by_tweet_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id ASC");
        self
    }

	pub fn order_by_tweet_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id DESC");
        self
    }

    pub fn order_by_user_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id ASC");
        self
    }

	pub fn order_by_user_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id DESC");
        self
    }

    pub fn order_by_created_time_asc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time ASC");
        self
    }

	pub fn order_by_created_time_desc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time DESC");
        self
    }

    pub fn order_by_text_body_asc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body ASC");
        self
    }

	pub fn order_by_text_body_desc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body DESC");
        self
    }

    
    pub fn tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Deleter

#[derive(Default, Debug)]
pub struct TweetDeleter {
    q: TQuery
}

impl TweetDeleter {
    pub fn new() -> Self {
        TweetDeleter::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    //each column delete
    pub fn delete_tweet_id(&mut self) -> &mut Self {
        self.q.delete_cols.push("tweet_id");
        self
    }
    
    pub fn delete_user_id(&mut self) -> &mut Self {
        self.q.delete_cols.push("user_id");
        self
    }
    
    pub fn delete_created_time(&mut self) -> &mut Self {
        self.q.delete_cols.push("created_time");
        self
    }
    
    pub fn delete_text_body(&mut self) -> &mut Self {
        self.q.delete_cols.push("text_body");
        self
    }
    

    pub async fn delete(&mut self, session: &SPool) -> Result<(),MyError> {
        delete_rows(&self.q, session).await
    }

    
    pub fn order_by_tweet_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id ASC");
        self
    }

	pub fn order_by_tweet_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("tweet_id DESC");
        self
    }

    pub fn order_by_user_id_asc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id ASC");
        self
    }

	pub fn order_by_user_id_desc(&mut self) -> &mut Self {
		self.q.order_by.push("user_id DESC");
        self
    }

    pub fn order_by_created_time_asc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time ASC");
        self
    }

	pub fn order_by_created_time_desc(&mut self) -> &mut Self {
		self.q.order_by.push("created_time DESC");
        self
    }

    pub fn order_by_text_body_asc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body ASC");
        self
    }

	pub fn order_by_text_body_desc(&mut self) -> &mut Self {
		self.q.order_by.push("text_body DESC");
        self
    }

    
    pub fn tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_tweet_id_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_user_id_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR user_id >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_created_time_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR created_time >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_text_body_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR text_body >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_tweet_id_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR tweet_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_user_id_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR user_id IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_created_time_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR created_time IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_text_body_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR text_body IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

pub async fn tweet_mass_insert(arr :&Vec<Tweet>, spool: &SPool) -> Result<(),MyError> {
    let mut conn = spool.pool.get_conn().await?;
    if arr.len() == 0 {
        return Err(MyError::EmptySql)
    }
    let mut insert_fields = "(user_id, created_time, text_body)";

    let mut vals_str = "(?, ?, ?), ".repeat(arr.len());
   
    let vals_str = &vals_str[0..(vals_str.len()-2)];

    let query = format!(r"INSERT INTO {:}.tweet {:} VALUES {:}", &spool.database, insert_fields, vals_str);

    let mut arr_vals = vec![];
    for ar in arr {
                   arr_vals.push(ar.tweet_id.clone().into());
                   arr_vals.push(ar.user_id.clone().into());
                   arr_vals.push(ar.created_time.clone().into());
                   arr_vals.push(ar.text_body.clone().into());
    }

    let p = Params::Positional(arr_vals);

    println!("{} - {:?}", &query, &p);

    let qr = conn.exec_iter(
        query, p
    ).await?;

    Ok(())
}
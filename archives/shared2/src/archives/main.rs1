mod pb;
// mod ps;

use quick_protobuf::MessageRead;
use quick_protobuf::{BytesReader, MessageWrite};

mod snazzy;
// mod items;
// mod x;
fn main() {
    let mut h = "".to_string();
    for i in 0..1_000_000_000 {
        h = "s".to_string();
        if i % 10_000_000 == 0 {
            println!("alloc > {}", i);
        }
    }

    let mut b = Box::new(8);
    for i in 0..400_000_000 {
        b = Box::new(i);
        if i % 1_000_000 == 0 {
            println!("box > {}", i);
        }
    }



    let mut m = std::collections::HashMap::new();
    for i in 0..50_000_000 {
        m.insert(i, "asdfsdfsd".to_string());

        if i % 1_000_000 == 0 {
            println!("i > {}", i);
        }
    }
    println!("Hello, world!");

    /*let s = snazzy::items::Shirt {
        color: Default::default(),
        size: Default::default(),
    };*/

    let t = pb::Thumbnail {
        size: 0,
        width: 0,
        height: 0,
        cache_id: Default::default(),
        name: Default::default(),
        mime: Default::default(),
    };

    let m = pb::Room {
        id: 0,
        type_pb: Default::default(),
        title: Default::default(),
        initials: Default::default(),
        color: Default::default(),
        unread_count: 0,
        last_message: None,
        read_only: false,
        is_participant: false,
        draft: None,
        first_unread_message: None,
        room_mute: Default::default(),
        pin_id: 0,
        pinned_message: None,
        priority: 0,
        chat_room_extra: None,
        group_room_extra: None,
        channel_room_extra: None,
    };
    // m.write_message()
    let v: Vec<u8> = vec![];

    let mut bs = BytesReader::from_bytes(&v);

    // ps::Room::from_reader(&mut bs, &v);

    // t.

    // snazzy::items::Shirt::
}

// fn read<T: MessageRead, G>(v: &Vec<u8>) -> G {
//     let mut bs = BytesReader::from_bytes(v);
//     pb::Room::from_reader(&mut bs, &v);
//     MessageRead::from_reader(&mut bs, v)
// }

// Include the `items` module, which is generated from items.proto.

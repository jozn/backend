// DO NOT MODIFY AUTO-GENERATED BY PB-WALKER
use mysql_async::prelude::*;
use mysql_async::{FromRowError, OptsBuilder, Params, Row, Pool};
use mysql_common::row::ColumnIndex;

use mysql_common::value::Value;
use crate::mysql_common::*;

#[derive(Default, Clone, PartialEq, Eq, Debug)]
pub struct MsgReshare  { // msg_reshare
    pub message_gid: u64,
    pub profile_cid: u64,
}

impl FromRow for MsgReshare {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(MsgReshare  {
            message_gid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
        })
    }
}

impl MsgReshare {
    pub async fn insert(&self, spool: &SPool) -> Result<MsgReshare,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"INSERT INTO {:}.msg_reshare (message_gid, profile_cid) VALUES (?, ?)",&spool.database);
        let p = Params::Positional(vec![self.message_gid.clone().into(), self.profile_cid.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    // [[ for template: this code is copy of insert with 'insert' changed to 'replace' ]]
    pub async fn replace(&self, spool: &SPool) -> Result<MsgReshare,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"REPLACE INTO {:}.msg_reshare (message_gid, profile_cid) VALUES (?, ?)",&spool.database);
        let p = Params::Positional(vec![self.message_gid.clone().into(), self.profile_cid.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn update(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;
        let query = format!(r"UPDATE `{:}`.msg_reshare` SET  WHERE message_gid = ? AND profile_cid = ? ", &spool.database);
        let p = Params::Positional(vec![ self.message_gid.clone().into(), self.profile_cid.clone().into() ]);

        let qr = conn.exec_iter(
            query, p
        ).await?;

        Ok(())
    }

    pub async fn delete(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"DELETE FROM `{:}`.msg_reshare` WHERE message_gid = ? AND profile_cid = ? ", &spool.database);
        let p = Params::Positional(vec![self.message_gid.clone().into(), self.profile_cid.clone().into()]);

        conn.exec_drop(
            query, p
        ).await?;

        Ok(())
    }
}


#[derive(Default, Debug)]
pub struct MsgReshareSelector {
    q: TQuery
}

impl MsgReshareSelector {
    pub fn new() -> Self {
        MsgReshareSelector{
            q: TQuery{
                table: "msg_reshare",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.q.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_message_gid(&mut self) -> &mut Self {
        self.q.select_cols.push("message_gid");
        self
    }
    
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.q.select_cols.push("profile_cid");
        self
    }
    

    pub async fn _get_rows_with_size(&mut self, session: &SPool, size: i64) -> Result<Vec<MsgReshare>, MyError>   {
        let mut conn = session.pool.get_conn().await?;
        let(cql_query, query_values) = self.q._to_sql_selector(&session.database);

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(
                cql_query,p,
                |obj: MsgReshare| obj
            ).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &SPool) -> Result<Vec<MsgReshare>, MyError>{
        self._get_rows_with_size(session,-1).await
    }

    pub async fn get_row(&mut self, session: &SPool) -> Result<MsgReshare, MyError>{
        let rows = self._get_rows_with_size(session,1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound)
        }
    }

    // Modifiers
    
    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid ASC");
        self
    }

	pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    
    pub fn message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Updater

#[derive(Default, Debug)]
pub struct MsgReshareUpdater {
    q: TQuery
}

impl MsgReshareUpdater {
    pub fn new() -> Self {
        MsgReshareUpdater{
            q: TQuery{
                table: "msg_reshare",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    //each column delete
    pub fn set_message_gid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("message_gid",val.into());
        self
    }
    
    pub fn set_profile_cid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("profile_cid",val.into());
        self
    }
    

    pub async fn update(&mut self, session: &SPool) -> Result<(),MyError> {
        update_rows(&self.q, session).await
    }

    
    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid ASC");
        self
    }

	pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    
    pub fn message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Deleter

#[derive(Default, Debug)]
pub struct MsgReshareDeleter {
    q: TQuery
}

impl MsgReshareDeleter {
    pub fn new() -> Self {
        MsgReshareDeleter{
            q: TQuery{
                table: "msg_reshare",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub async fn delete(&mut self, session: &SPool) -> Result<(),MyError> {
        delete_rows(&self.q, session).await
    }

    
    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid ASC");
        self
    }

	pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    
    pub fn message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_message_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR message_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

pub async fn msg_reshare_mass_insert(arr :&Vec<MsgReshare>, spool: &SPool) -> Result<(),MyError> {
    let mut conn = spool.pool.get_conn().await?;
    if arr.len() == 0 {
        return Err(MyError::EmptySql)
    }
     let mut insert_fields = "(message_gid, profile_cid)";

     let mut vals_str = "(?, ?), ".repeat(arr.len());
    let vals_str = &vals_str[0..(vals_str.len()-2)];

    let query = format!(r"INSERT INTO {:}.tweet {:} VALUES {:}", &spool.database, insert_fields, vals_str);

    let mut arr_vals = vec![];
    for ar in arr {
        arr_vals.push(ar.message_gid.clone().into());
        arr_vals.push(ar.profile_cid.clone().into());}

    let p = Params::Positional(arr_vals);

    println!("{} - {:?}", &query, &p);

    let qr = conn.exec_iter(
        query, p
    ).await?;

    Ok(())
}

// Index
pub async fn get_msg_reshare(message_gid: u64,profile_cid: u64, spool: &SPool) -> Result<MsgReshare,MyError> {
	let m = MsgReshareSelector::new()
		.message_gid_eq(message_gid)
		.and_profile_cid_eq(profile_cid)
		.get_row(spool).await?;
	Ok(m)
}

// DO NOT MODIFY AUTO-GENERATED BY PB-WALKER
use mysql_async::prelude::*;
use mysql_async::{FromRowError, OptsBuilder, Params, Row, Pool};
use mysql_common::row::ColumnIndex;

use mysql_common::value::Value;
use crate::mysql_common::*;

#[derive(Default, Clone, PartialEq, Eq, Debug)]
pub struct ChatMsg  { // chat_msg
    pub profile_cid: u32,
    pub chat_gid: u64,
    pub msg_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for ChatMsg {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChatMsg  {
            profile_cid: row.get(0).unwrap_or_default(),
            chat_gid: row.get(1).unwrap_or_default(),
            msg_gid: row.get(2).unwrap_or_default(),
            pb_data: row.get(3).unwrap_or_default(),
            debug_data: row.get(4).unwrap_or_default(),
        })
    }
}

impl ChatMsg {
    pub async fn insert(&self, spool: &SPool) -> Result<ChatMsg,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"INSERT INTO {:}.chat_msg (profile_cid, chat_gid, msg_gid, pb_data, debug_data) VALUES (?, ?, ?, ?, ?)",&spool.database);
        let p = Params::Positional(vec![self.profile_cid.clone().into(), self.chat_gid.clone().into(), self.msg_gid.clone().into(), self.pb_data.clone().into(), self.debug_data.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    // [[ for template: this code is copy of insert with 'insert' changed to 'replace' ]]
    pub async fn replace(&self, spool: &SPool) -> Result<ChatMsg,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"REPLACE INTO {:}.chat_msg (profile_cid, chat_gid, msg_gid, pb_data, debug_data) VALUES (?, ?, ?, ?, ?)",&spool.database);
        let p = Params::Positional(vec![self.profile_cid.clone().into(), self.chat_gid.clone().into(), self.msg_gid.clone().into(), self.pb_data.clone().into(), self.debug_data.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn update(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;
        let query = format!(r"UPDATE `{:}`.chat_msg` SET pb_data = ?, debug_data = ? WHERE profile_cid = ? AND chat_gid = ? AND msg_gid = ? ", &spool.database);
        let p = Params::Positional(vec![self.pb_data.clone().into(), self.debug_data.clone().into(),  self.profile_cid.clone().into(), self.chat_gid.clone().into(), self.msg_gid.clone().into() ]);

        let qr = conn.exec_iter(
            query, p
        ).await?;

        Ok(())
    }

    pub async fn delete(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"DELETE FROM `{:}`.chat_msg` WHERE profile_cid = ? AND chat_gid = ? AND msg_gid = ? ", &spool.database);
        let p = Params::Positional(vec![self.profile_cid.clone().into(), self.chat_gid.clone().into(), self.msg_gid.clone().into()]);

        conn.exec_drop(
            query, p
        ).await?;

        Ok(())
    }
}


#[derive(Default, Debug)]
pub struct ChatMsgSelector {
    q: TQuery
}

impl ChatMsgSelector {
    pub fn new() -> Self {
        ChatMsgSelector{
            q: TQuery{
                table: "chat_msg",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.q.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.q.select_cols.push("profile_cid");
        self
    }
    
    pub fn select_chat_gid(&mut self) -> &mut Self {
        self.q.select_cols.push("chat_gid");
        self
    }
    
    pub fn select_msg_gid(&mut self) -> &mut Self {
        self.q.select_cols.push("msg_gid");
        self
    }
    
    pub fn select_pb_data(&mut self) -> &mut Self {
        self.q.select_cols.push("pb_data");
        self
    }
    
    pub fn select_debug_data(&mut self) -> &mut Self {
        self.q.select_cols.push("debug_data");
        self
    }
    

    pub async fn _get_rows_with_size(&mut self, session: &SPool, size: i64) -> Result<Vec<ChatMsg>, MyError>   {
        let mut conn = session.pool.get_conn().await?;
        let(cql_query, query_values) = self.q._to_sql_selector(&session.database);

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(
                cql_query,p,
                |obj: ChatMsg| obj
            ).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &SPool) -> Result<Vec<ChatMsg>, MyError>{
        self._get_rows_with_size(session,-1).await
    }

    pub async fn get_row(&mut self, session: &SPool) -> Result<ChatMsg, MyError>{
        let rows = self._get_rows_with_size(session,1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound)
        }
    }

    // Modifiers
    
    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_chat_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid ASC");
        self
    }

	pub fn order_by_chat_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid ASC");
        self
    }

	pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data ASC");
        self
    }

	pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data DESC");
        self
    }

    
    pub fn profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Updater

#[derive(Default, Debug)]
pub struct ChatMsgUpdater {
    q: TQuery
}

impl ChatMsgUpdater {
    pub fn new() -> Self {
        ChatMsgUpdater{
            q: TQuery{
                table: "chat_msg",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    //each column delete
    pub fn set_profile_cid(&mut self, val :u32) -> &mut Self {
        self.q.updates.insert("profile_cid",val.into());
        self
    }
    
    pub fn set_chat_gid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("chat_gid",val.into());
        self
    }
    
    pub fn set_msg_gid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("msg_gid",val.into());
        self
    }
    
    pub fn set_pb_data(&mut self, val :&Vec<u8>) -> &mut Self {
        self.q.updates.insert("pb_data",val.into());
        self
    }
    
    pub fn set_debug_data(&mut self, val :&str) -> &mut Self {
        self.q.updates.insert("debug_data",val.into());
        self
    }
    

    pub async fn update(&mut self, session: &SPool) -> Result<(),MyError> {
        update_rows(&self.q, session).await
    }

    
    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_chat_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid ASC");
        self
    }

	pub fn order_by_chat_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid ASC");
        self
    }

	pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data ASC");
        self
    }

	pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data DESC");
        self
    }

    
    pub fn profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Deleter

#[derive(Default, Debug)]
pub struct ChatMsgDeleter {
    q: TQuery
}

impl ChatMsgDeleter {
    pub fn new() -> Self {
        ChatMsgDeleter{
            q: TQuery{
                table: "chat_msg",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub async fn delete(&mut self, session: &SPool) -> Result<(),MyError> {
        delete_rows(&self.q, session).await
    }

    
    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_chat_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid ASC");
        self
    }

	pub fn order_by_chat_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("chat_gid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid ASC");
        self
    }

	pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data ASC");
        self
    }

	pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
		self.q.order_by.push("debug_data DESC");
        self
    }

    
    pub fn profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u32 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_chat_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_le (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge (&mut self, val: &str ) -> &mut Self {
        let w = WhereClause{
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u32> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_chat_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR chat_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_msg_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR msg_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_debug_data_in (&mut self, val: Vec<&str> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR debug_data IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

pub async fn chat_msg_mass_insert(arr :&Vec<ChatMsg>, spool: &SPool) -> Result<(),MyError> {
    let mut conn = spool.pool.get_conn().await?;
    if arr.len() == 0 {
        return Err(MyError::EmptySql)
    }
     let mut insert_fields = "(profile_cid, chat_gid, msg_gid, pb_data, debug_data)";

     let mut vals_str = "(?, ?, ?, ?, ?), ".repeat(arr.len());
    let vals_str = &vals_str[0..(vals_str.len()-2)];

    let query = format!(r"INSERT INTO {:}.tweet {:} VALUES {:}", &spool.database, insert_fields, vals_str);

    let mut arr_vals = vec![];
    for ar in arr {
        arr_vals.push(ar.profile_cid.clone().into());
        arr_vals.push(ar.chat_gid.clone().into());
        arr_vals.push(ar.msg_gid.clone().into());
        arr_vals.push(ar.pb_data.clone().into());
        arr_vals.push(ar.debug_data.clone().into());}

    let p = Params::Positional(arr_vals);

    println!("{} - {:?}", &query, &p);

    let qr = conn.exec_iter(
        query, p
    ).await?;

    Ok(())
}

// Index
pub async fn get_chat_msg(profile_cid: u32,chat_gid: u64,msg_gid: u64, spool: &SPool) -> Result<ChatMsg,MyError> {
	let m = ChatMsgSelector::new()
		.profile_cid_eq(profile_cid)
		.and_chat_gid_eq(chat_gid)
		.and_msg_gid_eq(msg_gid)
		.get_row(spool).await?;
	Ok(m)
}

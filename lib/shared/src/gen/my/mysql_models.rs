// DO NOT MODIFY AUTO-GENERATED BY PB-WALKER
use mysql_async::prelude::*;
use mysql_async::{FromRowError, OptsBuilder, Params, Pool, Row};
use mysql_common::row::ColumnIndex;

use mysql_common::value::Value;

//use crate::xc::CWError;

// Every Table Must Have Primary Keys to Be Included In This Output
// Primiay Keys must be one column (no compostion types yet)
// Primiay Keys can be 1) Auto Increment 2) Other self Inserted

// Implemention is simple NOT many features is suported in Rust version:
// Keep mysql data types in int, bigint, text, varchar, bool, blob
// No signed integer is supported
// For now Primary key should only be numbers
// Not fully ORM is supported: limited to CRUD on rows + Indexes querys

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Channel {
    // channel
    pub channel_cid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Channel {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Channel {
            channel_cid: row.get(0).unwrap_or_default(),
            pb_data: row.get(1).unwrap_or_default(),
            debug_data: row.get(2).unwrap_or_default(),
        })
    }
}

impl Channel {
    pub async fn replace(&self, pool: &Pool) -> Result<Channel, MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"REPLACE INTO flip_my.channel (channel_cid, pb_data, debug_data) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Channel, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel (channel_cid) VALUES (?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query =
            r"UPDATE flip_my.channel SET pb_data = ?, debug_data = ? WHERE channel_cid = ? ";
        let p = Params::Positional(vec![
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.channel_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.channel WHERE channel_cid = ? ";
        let p = Params::Positional(vec![self.channel_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChannelSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChannelSelector {
    pub fn new() -> Self {
        ChannelSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.channel", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Channel>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Channel| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Channel>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Channel, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ChannelFollower {
    // channel_follower
    pub channel_cid: u64,
    pub profile_cid: u64,
    pub follow_gid: u64,
}

impl FromRow for ChannelFollower {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChannelFollower {
            channel_cid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
            follow_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ChannelFollower {
    pub async fn replace(&self, pool: &Pool) -> Result<ChannelFollower, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_follower (channel_cid, profile_cid, follow_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.profile_cid.clone().into(),
            self.follow_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ChannelFollower, MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"REPLACE INTO flip_my.channel_follower (channel_cid, profile_cid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.profile_cid.clone().into(),
            self.follow_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.channel_follower SET follow_gid = ? WHERE channel_cid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.follow_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"DELETE FROM flip_my.channel_follower WHERE channel_cid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![self.profile_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChannelFollowerSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChannelFollowerSelector {
    pub fn new() -> Self {
        ChannelFollowerSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_follow_gid(&mut self) -> &mut Self {
        self.select_cols.push("follow_gid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.channel_follower", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ChannelFollower>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(cql_query, p, |obj: ChannelFollower| obj)
            .await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ChannelFollower>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ChannelFollower, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_follow_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("follow_gid ASC");
        self
    }

    pub fn order_by_follow_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("follow_gid DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ChannelMsg {
    // channel_msg
    pub channel_cid: u64,
    pub msg_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for ChannelMsg {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChannelMsg {
            channel_cid: row.get(0).unwrap_or_default(),
            msg_gid: row.get(1).unwrap_or_default(),
            pb_data: row.get(2).unwrap_or_default(),
            debug_data: row.get(3).unwrap_or_default(),
        })
    }
}

impl ChannelMsg {
    pub async fn replace(&self, pool: &Pool) -> Result<ChannelMsg, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_msg (channel_cid, msg_gid, pb_data, debug_data) VALUES (?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ChannelMsg, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_msg (channel_cid, msg_gid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.channel_msg SET pb_data = ?, debug_data = ? WHERE channel_cid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.channel_msg WHERE channel_cid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![self.msg_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChannelMsgSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChannelMsgSelector {
    pub fn new() -> Self {
        ChannelMsgSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_msg_gid(&mut self) -> &mut Self {
        self.select_cols.push("msg_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.channel_msg", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ChannelMsg>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: ChannelMsg| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ChannelMsg>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ChannelMsg, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid ASC");
        self
    }

    pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ChannelMsgMedia {
    // channel_msg_media
    pub channel_cid: u64,
    pub media_type_id: u32,
    pub msg_gid: u64,
}

impl FromRow for ChannelMsgMedia {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChannelMsgMedia {
            channel_cid: row.get(0).unwrap_or_default(),
            media_type_id: row.get(1).unwrap_or_default(),
            msg_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ChannelMsgMedia {
    pub async fn replace(&self, pool: &Pool) -> Result<ChannelMsgMedia, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_msg_media (channel_cid, media_type_id, msg_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.media_type_id.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ChannelMsgMedia, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_msg_media (channel_cid, media_type_id, msg_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.media_type_id.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.channel_msg_media SET  WHERE channel_cid = ? AND media_type_id = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.media_type_id.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.channel_msg_media WHERE channel_cid = ? AND media_type_id = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![self.msg_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChannelMsgMediaSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChannelMsgMediaSelector {
    pub fn new() -> Self {
        ChannelMsgMediaSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_media_type_id(&mut self) -> &mut Self {
        self.select_cols.push("media_type_id");
        self
    }

    pub fn select_msg_gid(&mut self) -> &mut Self {
        self.select_cols.push("msg_gid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.channel_msg_media", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ChannelMsgMedia>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(cql_query, p, |obj: ChannelMsgMedia| obj)
            .await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ChannelMsgMedia>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ChannelMsgMedia, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_media_type_id_asc(&mut self) -> &mut Self {
        self.order_by.push("media_type_id ASC");
        self
    }

    pub fn order_by_media_type_id_desc(&mut self) -> &mut Self {
        self.order_by.push("media_type_id DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid ASC");
        self
    }

    pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn media_type_id_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " media_type_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn media_type_id_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " media_type_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn media_type_id_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " media_type_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn media_type_id_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " media_type_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn media_type_id_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " media_type_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_media_type_id_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND media_type_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_media_type_id_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND media_type_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_media_type_id_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND media_type_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_media_type_id_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND media_type_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_media_type_id_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND media_type_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_media_type_id_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR media_type_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_media_type_id_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR media_type_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_media_type_id_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR media_type_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_media_type_id_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR media_type_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_media_type_id_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR media_type_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ChannelSubscriber {
    // channel_subscriber
    pub channel_cid: u64,
    pub profile_cid: u64,
    pub subscriber_gid: u64,
}

impl FromRow for ChannelSubscriber {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChannelSubscriber {
            channel_cid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
            subscriber_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ChannelSubscriber {
    pub async fn replace(&self, pool: &Pool) -> Result<ChannelSubscriber, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_subscriber (channel_cid, profile_cid, subscriber_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.profile_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ChannelSubscriber, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.channel_subscriber (channel_cid, profile_cid, subscriber_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.profile_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.channel_subscriber SET  WHERE channel_cid = ? AND profile_cid = ? AND subscriber_gid = ? ";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.profile_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.channel_subscriber WHERE channel_cid = ? AND profile_cid = ? AND subscriber_gid = ? ";
        let p = Params::Positional(vec![self.subscriber_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChannelSubscriberSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChannelSubscriberSelector {
    pub fn new() -> Self {
        ChannelSubscriberSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_subscriber_gid(&mut self) -> &mut Self {
        self.select_cols.push("subscriber_gid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.channel_subscriber", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ChannelSubscriber>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(cql_query, p, |obj: ChannelSubscriber| obj)
            .await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ChannelSubscriber>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ChannelSubscriber, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_subscriber_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("subscriber_gid ASC");
        self
    }

    pub fn order_by_subscriber_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("subscriber_gid DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Chat {
    // chat
    pub profile_cid: u64,
    pub chat_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Chat {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Chat {
            profile_cid: row.get(0).unwrap_or_default(),
            chat_gid: row.get(1).unwrap_or_default(),
            pb_data: row.get(2).unwrap_or_default(),
            debug_data: row.get(3).unwrap_or_default(),
        })
    }
}

impl Chat {
    pub async fn replace(&self, pool: &Pool) -> Result<Chat, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.chat (profile_cid, chat_gid, pb_data, debug_data) VALUES (?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.chat_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Chat, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.chat (profile_cid, chat_gid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.chat_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.chat SET pb_data = ?, debug_data = ? WHERE profile_cid = ? AND chat_gid = ? ";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.chat_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.chat WHERE profile_cid = ? AND chat_gid = ? ";
        let p = Params::Positional(vec![self.chat_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChatSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChatSelector {
    pub fn new() -> Self {
        ChatSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_chat_gid(&mut self) -> &mut Self {
        self.select_cols.push("chat_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.chat", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Chat>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Chat| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Chat>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Chat, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_chat_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("chat_gid ASC");
        self
    }

    pub fn order_by_chat_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("chat_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ChatMsg {
    // chat_msg
    pub profile_cid: u64,
    pub chat_gid: u64,
    pub msg_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for ChatMsg {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChatMsg {
            profile_cid: row.get(0).unwrap_or_default(),
            chat_gid: row.get(1).unwrap_or_default(),
            msg_gid: row.get(2).unwrap_or_default(),
            pb_data: row.get(3).unwrap_or_default(),
            debug_data: row.get(4).unwrap_or_default(),
        })
    }
}

impl ChatMsg {
    pub async fn replace(&self, pool: &Pool) -> Result<ChatMsg, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.chat_msg (profile_cid, chat_gid, msg_gid, pb_data, debug_data) VALUES (?, ?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.chat_gid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ChatMsg, MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"REPLACE INTO flip_my.chat_msg (profile_cid, chat_gid, msg_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.chat_gid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.chat_msg SET pb_data = ?, debug_data = ? WHERE profile_cid = ? AND chat_gid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.chat_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"DELETE FROM flip_my.chat_msg WHERE profile_cid = ? AND chat_gid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![self.msg_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ChatMsgSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ChatMsgSelector {
    pub fn new() -> Self {
        ChatMsgSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_chat_gid(&mut self) -> &mut Self {
        self.select_cols.push("chat_gid");
        self
    }

    pub fn select_msg_gid(&mut self) -> &mut Self {
        self.select_cols.push("msg_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.chat_msg", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ChatMsg>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: ChatMsg| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ChatMsg>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ChatMsg, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_chat_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("chat_gid ASC");
        self
    }

    pub fn order_by_chat_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("chat_gid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid ASC");
        self
    }

    pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_chat_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR chat_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Direct {
    // direct
    pub profile_cid: u64,
    pub direct_gid: u64,
    pub msg_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Direct {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Direct {
            profile_cid: row.get(0).unwrap_or_default(),
            direct_gid: row.get(1).unwrap_or_default(),
            msg_gid: row.get(2).unwrap_or_default(),
            pb_data: row.get(3).unwrap_or_default(),
            debug_data: row.get(4).unwrap_or_default(),
        })
    }
}

impl Direct {
    pub async fn replace(&self, pool: &Pool) -> Result<Direct, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.direct (profile_cid, direct_gid, msg_gid, pb_data, debug_data) VALUES (?, ?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.direct_gid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Direct, MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"REPLACE INTO flip_my.direct (profile_cid, direct_gid, msg_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.direct_gid.clone().into(),
            self.msg_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.direct SET pb_data = ?, debug_data = ? WHERE profile_cid = ? AND direct_gid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.direct_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.msg_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"DELETE FROM flip_my.direct WHERE profile_cid = ? AND direct_gid = ? AND msg_gid = ? ";
        let p = Params::Positional(vec![self.msg_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct DirectSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl DirectSelector {
    pub fn new() -> Self {
        DirectSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_direct_gid(&mut self) -> &mut Self {
        self.select_cols.push("direct_gid");
        self
    }

    pub fn select_msg_gid(&mut self) -> &mut Self {
        self.select_cols.push("msg_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.direct", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Direct>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Direct| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Direct>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Direct, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_direct_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("direct_gid ASC");
        self
    }

    pub fn order_by_direct_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("direct_gid DESC");
        self
    }

    pub fn order_by_msg_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid ASC");
        self
    }

    pub fn order_by_msg_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("msg_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn direct_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " direct_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn direct_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " direct_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn direct_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " direct_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn direct_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " direct_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn direct_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " direct_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_direct_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND direct_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_direct_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND direct_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_direct_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND direct_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_direct_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND direct_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_direct_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND direct_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_direct_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR direct_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_direct_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR direct_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_direct_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR direct_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_direct_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR direct_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_direct_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR direct_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_msg_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR msg_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct File {
    // file
    pub file_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for File {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(File {
            file_gid: row.get(0).unwrap_or_default(),
            pb_data: row.get(1).unwrap_or_default(),
            debug_data: row.get(2).unwrap_or_default(),
        })
    }
}

impl File {
    pub async fn replace(&self, pool: &Pool) -> Result<File, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.file (file_gid, pb_data, debug_data) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.file_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<File, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.file (file_gid) VALUES (?)";
        let p = Params::Positional(vec![
            self.file_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.file SET pb_data = ?, debug_data = ? WHERE file_gid = ? ";
        let p = Params::Positional(vec![
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.file_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.file WHERE file_gid = ? ";
        let p = Params::Positional(vec![self.file_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct FileSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl FileSelector {
    pub fn new() -> Self {
        FileSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_file_gid(&mut self) -> &mut Self {
        self.select_cols.push("file_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.file", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<File>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: File| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<File>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<File, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_file_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("file_gid ASC");
        self
    }

    pub fn order_by_file_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("file_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct FileRef {
    // file_ref
    pub file_gid: u64,
    pub ref_id: u64,
}

impl FromRow for FileRef {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(FileRef {
            file_gid: row.get(0).unwrap_or_default(),
            ref_id: row.get(1).unwrap_or_default(),
        })
    }
}

impl FileRef {
    pub async fn replace(&self, pool: &Pool) -> Result<FileRef, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.file_ref (file_gid, ref_id) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.file_gid.clone().into(),
            self.ref_id.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<FileRef, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.file_ref (file_gid, ref_id) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.file_gid.clone().into(),
            self.ref_id.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.file_ref SET  WHERE file_gid = ? AND ref_id = ? ";
        let p = Params::Positional(vec![
            self.file_gid.clone().into(),
            self.ref_id.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.file_ref WHERE file_gid = ? AND ref_id = ? ";
        let p = Params::Positional(vec![self.ref_id.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct FileRefSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl FileRefSelector {
    pub fn new() -> Self {
        FileRefSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_file_gid(&mut self) -> &mut Self {
        self.select_cols.push("file_gid");
        self
    }

    pub fn select_ref_id(&mut self) -> &mut Self {
        self.select_cols.push("ref_id");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.file_ref", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<FileRef>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: FileRef| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<FileRef>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<FileRef, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_file_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("file_gid ASC");
        self
    }

    pub fn order_by_file_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("file_gid DESC");
        self
    }

    pub fn order_by_ref_id_asc(&mut self) -> &mut Self {
        self.order_by.push("ref_id ASC");
        self
    }

    pub fn order_by_ref_id_desc(&mut self) -> &mut Self {
        self.order_by.push("ref_id DESC");
        self
    }

    pub fn file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_file_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR file_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn ref_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " ref_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn ref_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " ref_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn ref_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " ref_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn ref_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " ref_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn ref_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " ref_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_ref_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND ref_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_ref_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND ref_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_ref_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND ref_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_ref_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND ref_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_ref_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND ref_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_ref_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR ref_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_ref_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR ref_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_ref_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR ref_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_ref_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR ref_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_ref_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR ref_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct GenCid {
    // gen_cid
    pub cid: u32,
    pub intent: String,
}

impl FromRow for GenCid {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(GenCid {
            cid: row.get(0).unwrap_or_default(),
            intent: row.get(1).unwrap_or_default(),
        })
    }
}

impl GenCid {
    pub async fn insert(&self, pool: &Pool) -> Result<GenCid, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.gen_cid (intent) VALUES (?)";
        let p = Params::Positional(vec![self.intent.clone().into()]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.cid = qr.last_insert_id().unwrap() as u32;
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<GenCid, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.gen_cid (intent) VALUES (?)";
        let p = Params::Positional(vec![self.intent.clone().into()]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.cid = qr.last_insert_id().unwrap() as u32;

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.gen_cid SET intent = ? WHERE cid = ? ";
        let p = Params::Positional(vec![self.intent.clone().into(), self.cid.clone().into()]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.gen_cid WHERE cid = ? ";
        let p = Params::Positional(vec![self.cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct GenCidSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl GenCidSelector {
    pub fn new() -> Self {
        GenCidSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_cid(&mut self) -> &mut Self {
        self.select_cols.push("cid");
        self
    }

    pub fn select_intent(&mut self) -> &mut Self {
        self.select_cols.push("intent");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.gen_cid", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<GenCid>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: GenCid| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<GenCid>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<GenCid, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("cid ASC");
        self
    }

    pub fn order_by_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("cid DESC");
        self
    }

    pub fn order_by_intent_asc(&mut self) -> &mut Self {
        self.order_by.push("intent ASC");
        self
    }

    pub fn order_by_intent_desc(&mut self) -> &mut Self {
        self.order_by.push("intent DESC");
        self
    }

    pub fn cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn intent_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " intent = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn intent_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " intent < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn intent_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " intent <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn intent_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " intent > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn intent_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " intent >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_intent_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND intent = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_intent_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND intent < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_intent_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND intent <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_intent_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND intent > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_intent_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND intent >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_intent_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR intent = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_intent_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR intent < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_intent_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR intent <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_intent_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR intent > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_intent_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR intent >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MsgComment {
    // msg_comment
    pub channel_cid: u64,
    pub message_gid: u64,
    pub comment_gid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for MsgComment {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(MsgComment {
            channel_cid: row.get(0).unwrap_or_default(),
            message_gid: row.get(1).unwrap_or_default(),
            comment_gid: row.get(2).unwrap_or_default(),
            pb_data: row.get(3).unwrap_or_default(),
            debug_data: row.get(4).unwrap_or_default(),
        })
    }
}

impl MsgComment {
    pub async fn replace(&self, pool: &Pool) -> Result<MsgComment, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_comment (channel_cid, message_gid, comment_gid, pb_data, debug_data) VALUES (?, ?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.message_gid.clone().into(),
            self.comment_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<MsgComment, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_comment (message_gid, comment_gid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.message_gid.clone().into(),
            self.comment_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.msg_comment SET channel_cid = ?, pb_data = ?, debug_data = ? WHERE message_gid = ? AND comment_gid = ? ";
        let p = Params::Positional(vec![
            self.channel_cid.clone().into(),
            self.message_gid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.comment_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.msg_comment WHERE message_gid = ? AND comment_gid = ? ";
        let p = Params::Positional(vec![self.comment_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct MsgCommentSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl MsgCommentSelector {
    pub fn new() -> Self {
        MsgCommentSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_message_gid(&mut self) -> &mut Self {
        self.select_cols.push("message_gid");
        self
    }

    pub fn select_comment_gid(&mut self) -> &mut Self {
        self.select_cols.push("comment_gid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.msg_comment", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<MsgComment>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: MsgComment| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<MsgComment>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<MsgComment, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("message_gid ASC");
        self
    }

    pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_comment_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("comment_gid ASC");
        self
    }

    pub fn order_by_comment_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("comment_gid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn comment_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " comment_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn comment_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " comment_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn comment_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " comment_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn comment_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " comment_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn comment_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " comment_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_comment_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND comment_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_comment_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND comment_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_comment_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND comment_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_comment_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND comment_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_comment_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND comment_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_comment_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR comment_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_comment_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR comment_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_comment_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR comment_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_comment_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR comment_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_comment_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR comment_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MsgLike {
    // msg_like
    pub message_gid: u64,
    pub profile_cid: u64,
}

impl FromRow for MsgLike {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(MsgLike {
            message_gid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
        })
    }
}

impl MsgLike {
    pub async fn replace(&self, pool: &Pool) -> Result<MsgLike, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_like (message_gid, profile_cid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<MsgLike, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_like (message_gid, profile_cid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.msg_like SET  WHERE message_gid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.msg_like WHERE message_gid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![self.profile_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct MsgLikeSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl MsgLikeSelector {
    pub fn new() -> Self {
        MsgLikeSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_message_gid(&mut self) -> &mut Self {
        self.select_cols.push("message_gid");
        self
    }

    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.msg_like", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<MsgLike>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: MsgLike| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<MsgLike>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<MsgLike, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("message_gid ASC");
        self
    }

    pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct MsgReshare {
    // msg_reshare
    pub message_gid: u64,
    pub profile_cid: u64,
}

impl FromRow for MsgReshare {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(MsgReshare {
            message_gid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
        })
    }
}

impl MsgReshare {
    pub async fn replace(&self, pool: &Pool) -> Result<MsgReshare, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_reshare (message_gid, profile_cid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<MsgReshare, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.msg_reshare (message_gid, profile_cid) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.msg_reshare SET  WHERE message_gid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![
            self.message_gid.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.msg_reshare WHERE message_gid = ? AND profile_cid = ? ";
        let p = Params::Positional(vec![self.profile_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct MsgReshareSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl MsgReshareSelector {
    pub fn new() -> Self {
        MsgReshareSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_message_gid(&mut self) -> &mut Self {
        self.select_cols.push("message_gid");
        self
    }

    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.msg_reshare", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<MsgReshare>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: MsgReshare| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<MsgReshare>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<MsgReshare, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_message_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("message_gid ASC");
        self
    }

    pub fn order_by_message_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("message_gid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_message_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR message_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Profile {
    // profile
    pub profile_cid: u64,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Profile {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Profile {
            profile_cid: row.get(0).unwrap_or_default(),
            pb_data: row.get(1).unwrap_or_default(),
            debug_data: row.get(2).unwrap_or_default(),
        })
    }
}

impl Profile {
    pub async fn replace(&self, pool: &Pool) -> Result<Profile, MyError> {
        let mut conn = pool.get_conn().await?;

        let query =
            r"REPLACE INTO flip_my.profile (profile_cid, pb_data, debug_data) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Profile, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.profile (profile_cid) VALUES (?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query =
            r"UPDATE flip_my.profile SET pb_data = ?, debug_data = ? WHERE profile_cid = ? ";
        let p = Params::Positional(vec![
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.profile_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.profile WHERE profile_cid = ? ";
        let p = Params::Positional(vec![self.profile_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ProfileSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ProfileSelector {
    pub fn new() -> Self {
        ProfileSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.profile", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Profile>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Profile| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Profile>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Profile, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ProfileFollower {
    // profile_follower
    pub profile_cid: u64,
    pub channel_cid: u64,
    pub follow_gid: u64,
}

impl FromRow for ProfileFollower {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ProfileFollower {
            profile_cid: row.get(0).unwrap_or_default(),
            channel_cid: row.get(1).unwrap_or_default(),
            follow_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ProfileFollower {
    pub async fn replace(&self, pool: &Pool) -> Result<ProfileFollower, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.profile_follower (profile_cid, channel_cid, follow_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.follow_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ProfileFollower, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.profile_follower (profile_cid, channel_cid, follow_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.follow_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.profile_follower SET  WHERE profile_cid = ? AND channel_cid = ? AND follow_gid = ? ";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.follow_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.profile_follower WHERE profile_cid = ? AND channel_cid = ? AND follow_gid = ? ";
        let p = Params::Positional(vec![self.follow_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ProfileFollowerSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ProfileFollowerSelector {
    pub fn new() -> Self {
        ProfileFollowerSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_follow_gid(&mut self) -> &mut Self {
        self.select_cols.push("follow_gid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.profile_follower", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ProfileFollower>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(cql_query, p, |obj: ProfileFollower| obj)
            .await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ProfileFollower>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ProfileFollower, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_follow_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("follow_gid ASC");
        self
    }

    pub fn order_by_follow_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("follow_gid DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_follow_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR follow_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct ProfileSubscriber {
    // profile_subscriber
    pub profile_cid: u64,
    pub channel_cid: u64,
    pub subscriber_gid: u64,
}

impl FromRow for ProfileSubscriber {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ProfileSubscriber {
            profile_cid: row.get(0).unwrap_or_default(),
            channel_cid: row.get(1).unwrap_or_default(),
            subscriber_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ProfileSubscriber {
    pub async fn replace(&self, pool: &Pool) -> Result<ProfileSubscriber, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.profile_subscriber (profile_cid, channel_cid, subscriber_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<ProfileSubscriber, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.profile_subscriber (profile_cid, channel_cid, subscriber_gid) VALUES (?, ?, ?)";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.profile_subscriber SET  WHERE profile_cid = ? AND channel_cid = ? AND subscriber_gid = ? ";
        let p = Params::Positional(vec![
            self.profile_cid.clone().into(),
            self.channel_cid.clone().into(),
            self.subscriber_gid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.profile_subscriber WHERE profile_cid = ? AND channel_cid = ? AND subscriber_gid = ? ";
        let p = Params::Positional(vec![self.subscriber_gid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct ProfileSubscriberSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl ProfileSubscriberSelector {
    pub fn new() -> Self {
        ProfileSubscriberSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.select_cols.push("profile_cid");
        self
    }

    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.select_cols.push("channel_cid");
        self
    }

    pub fn select_subscriber_gid(&mut self) -> &mut Self {
        self.select_cols.push("subscriber_gid");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.profile_subscriber", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<ProfileSubscriber>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(cql_query, p, |obj: ProfileSubscriber| obj)
            .await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<ProfileSubscriber>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<ProfileSubscriber, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid ASC");
        self
    }

    pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid ASC");
        self
    }

    pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_subscriber_gid_asc(&mut self) -> &mut Self {
        self.order_by.push("subscriber_gid ASC");
        self
    }

    pub fn order_by_subscriber_gid_desc(&mut self) -> &mut Self {
        self.order_by.push("subscriber_gid DESC");
        self
    }

    pub fn profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Session {
    // session
    pub session_hash: String,
    pub user_cid: u32,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Session {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Session {
            session_hash: row.get(0).unwrap_or_default(),
            user_cid: row.get(1).unwrap_or_default(),
            pb_data: row.get(2).unwrap_or_default(),
            debug_data: row.get(3).unwrap_or_default(),
        })
    }
}

impl Session {
    pub async fn replace(&self, pool: &Pool) -> Result<Session, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.session (session_hash, user_cid, pb_data, debug_data) VALUES (?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.session_hash.clone().into(),
            self.user_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Session, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.session (session_hash) VALUES (?)";
        let p = Params::Positional(vec![
            self.session_hash.clone().into(),
            self.user_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.session SET user_cid = ?, pb_data = ?, debug_data = ? WHERE session_hash = ? ";
        let p = Params::Positional(vec![
            self.user_cid.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.session_hash.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.session WHERE session_hash = ? ";
        let p = Params::Positional(vec![self.session_hash.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct SessionSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl SessionSelector {
    pub fn new() -> Self {
        SessionSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_session_hash(&mut self) -> &mut Self {
        self.select_cols.push("session_hash");
        self
    }

    pub fn select_user_cid(&mut self) -> &mut Self {
        self.select_cols.push("user_cid");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.session", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Session>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Session| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Session>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Session, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_session_hash_asc(&mut self) -> &mut Self {
        self.order_by.push("session_hash ASC");
        self
    }

    pub fn order_by_session_hash_desc(&mut self) -> &mut Self {
        self.order_by.push("session_hash DESC");
        self
    }

    pub fn order_by_user_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("user_cid ASC");
        self
    }

    pub fn order_by_user_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("user_cid DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn session_hash_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " session_hash = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn session_hash_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " session_hash < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn session_hash_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " session_hash <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn session_hash_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " session_hash > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn session_hash_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " session_hash >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_session_hash_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND session_hash = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_session_hash_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND session_hash < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_session_hash_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND session_hash <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_session_hash_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND session_hash > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_session_hash_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND session_hash >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_session_hash_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR session_hash = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_session_hash_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR session_hash < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_session_hash_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR session_hash <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_session_hash_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR session_hash > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_session_hash_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR session_hash >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Sms {
    // sms
    pub sms_id: u64,
    pub phone_number: String,
    pub hash_code: String,
    pub result_code: u32,
    pub pd_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for Sms {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Sms {
            sms_id: row.get(0).unwrap_or_default(),
            phone_number: row.get(1).unwrap_or_default(),
            hash_code: row.get(2).unwrap_or_default(),
            result_code: row.get(3).unwrap_or_default(),
            pd_data: row.get(4).unwrap_or_default(),
            debug_data: row.get(5).unwrap_or_default(),
        })
    }
}

impl Sms {
    pub async fn insert(&self, pool: &Pool) -> Result<Sms, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.sms (phone_number, hash_code, result_code, pd_data, debug_data) VALUES (?, ?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.phone_number.clone().into(),
            self.hash_code.clone().into(),
            self.result_code.clone().into(),
            self.pd_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.sms_id = qr.last_insert_id().unwrap() as u64;
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Sms, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.sms (phone_number, hash_code, result_code, pd_data, debug_data) VALUES (?, ?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.phone_number.clone().into(),
            self.hash_code.clone().into(),
            self.result_code.clone().into(),
            self.pd_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.sms_id = qr.last_insert_id().unwrap() as u64;

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.sms SET phone_number = ?, hash_code = ?, result_code = ?, pd_data = ?, debug_data = ? WHERE sms_id = ? ";
        let p = Params::Positional(vec![
            self.phone_number.clone().into(),
            self.hash_code.clone().into(),
            self.result_code.clone().into(),
            self.pd_data.clone().into(),
            self.debug_data.clone().into(),
            self.sms_id.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.sms WHERE sms_id = ? ";
        let p = Params::Positional(vec![self.sms_id.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct SmsSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl SmsSelector {
    pub fn new() -> Self {
        SmsSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_sms_id(&mut self) -> &mut Self {
        self.select_cols.push("sms_id");
        self
    }

    pub fn select_phone_number(&mut self) -> &mut Self {
        self.select_cols.push("phone_number");
        self
    }

    pub fn select_hash_code(&mut self) -> &mut Self {
        self.select_cols.push("hash_code");
        self
    }

    pub fn select_result_code(&mut self) -> &mut Self {
        self.select_cols.push("result_code");
        self
    }

    pub fn select_pd_data(&mut self) -> &mut Self {
        self.select_cols.push("pd_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.sms", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Sms>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Sms| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Sms>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Sms, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_sms_id_asc(&mut self) -> &mut Self {
        self.order_by.push("sms_id ASC");
        self
    }

    pub fn order_by_sms_id_desc(&mut self) -> &mut Self {
        self.order_by.push("sms_id DESC");
        self
    }

    pub fn order_by_phone_number_asc(&mut self) -> &mut Self {
        self.order_by.push("phone_number ASC");
        self
    }

    pub fn order_by_phone_number_desc(&mut self) -> &mut Self {
        self.order_by.push("phone_number DESC");
        self
    }

    pub fn order_by_hash_code_asc(&mut self) -> &mut Self {
        self.order_by.push("hash_code ASC");
        self
    }

    pub fn order_by_hash_code_desc(&mut self) -> &mut Self {
        self.order_by.push("hash_code DESC");
        self
    }

    pub fn order_by_result_code_asc(&mut self) -> &mut Self {
        self.order_by.push("result_code ASC");
        self
    }

    pub fn order_by_result_code_desc(&mut self) -> &mut Self {
        self.order_by.push("result_code DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn sms_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " sms_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn sms_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " sms_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn sms_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " sms_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn sms_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " sms_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn sms_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " sms_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_sms_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND sms_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_sms_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND sms_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_sms_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND sms_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_sms_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND sms_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_sms_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND sms_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_sms_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR sms_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_sms_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR sms_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_sms_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR sms_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_sms_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR sms_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_sms_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR sms_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn hash_code_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " hash_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn hash_code_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " hash_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn hash_code_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " hash_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn hash_code_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " hash_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn hash_code_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " hash_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_hash_code_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND hash_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_hash_code_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND hash_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_hash_code_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND hash_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_hash_code_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND hash_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_hash_code_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND hash_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_hash_code_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR hash_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_hash_code_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR hash_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_hash_code_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR hash_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_hash_code_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR hash_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_hash_code_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR hash_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn result_code_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " result_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn result_code_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " result_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn result_code_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " result_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn result_code_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " result_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn result_code_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: " result_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_result_code_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND result_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_result_code_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND result_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_result_code_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND result_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_result_code_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND result_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_result_code_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "AND result_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_result_code_eq(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR result_code = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_result_code_lt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR result_code < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_result_code_le(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR result_code <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_result_code_gt(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR result_code > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_result_code_ge(&mut self, val: u32) -> &mut Self {
        let w = WhereClause {
            condition: "OR result_code >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Tweet {
    // tweet
    pub tweet_id: u64,
    pub created_time: u64,
    pub text_body: String,
}

impl FromRow for Tweet {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(Tweet {
            tweet_id: row.get(0).unwrap_or_default(),
            created_time: row.get(1).unwrap_or_default(),
            text_body: row.get(2).unwrap_or_default(),
        })
    }
}

impl Tweet {
    pub async fn insert(&self, pool: &Pool) -> Result<Tweet, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.tweet (created_time, text_body) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.created_time.clone().into(),
            self.text_body.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.tweet_id = qr.last_insert_id().unwrap() as u64;
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<Tweet, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"INSERT INTO flip_my.tweet (created_time, text_body) VALUES (?, ?)";
        let p = Params::Positional(vec![
            self.created_time.clone().into(),
            self.text_body.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        let mut cp = self.clone();
        cp.tweet_id = qr.last_insert_id().unwrap() as u64;

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.tweet SET created_time = ?, text_body = ? WHERE tweet_id = ? ";
        let p = Params::Positional(vec![
            self.created_time.clone().into(),
            self.text_body.clone().into(),
            self.tweet_id.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.tweet WHERE tweet_id = ? ";
        let p = Params::Positional(vec![self.tweet_id.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct TweetSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl TweetSelector {
    pub fn new() -> Self {
        TweetSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_tweet_id(&mut self) -> &mut Self {
        self.select_cols.push("tweet_id");
        self
    }

    pub fn select_created_time(&mut self) -> &mut Self {
        self.select_cols.push("created_time");
        self
    }

    pub fn select_text_body(&mut self) -> &mut Self {
        self.select_cols.push("text_body");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.tweet", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<Tweet>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: Tweet| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<Tweet>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<Tweet, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_tweet_id_asc(&mut self) -> &mut Self {
        self.order_by.push("tweet_id ASC");
        self
    }

    pub fn order_by_tweet_id_desc(&mut self) -> &mut Self {
        self.order_by.push("tweet_id DESC");
        self
    }

    pub fn order_by_created_time_asc(&mut self) -> &mut Self {
        self.order_by.push("created_time ASC");
        self
    }

    pub fn order_by_created_time_desc(&mut self) -> &mut Self {
        self.order_by.push("created_time DESC");
        self
    }

    pub fn order_by_text_body_asc(&mut self) -> &mut Self {
        self.order_by.push("text_body ASC");
        self
    }

    pub fn order_by_text_body_desc(&mut self) -> &mut Self {
        self.order_by.push("text_body DESC");
        self
    }

    pub fn tweet_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn tweet_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn tweet_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn tweet_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn tweet_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_tweet_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_tweet_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_tweet_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_tweet_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_tweet_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_tweet_id_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR tweet_id = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_tweet_id_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR tweet_id < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_tweet_id_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR tweet_id <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_tweet_id_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR tweet_id > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_tweet_id_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR tweet_id >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn created_time_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " created_time = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn created_time_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " created_time < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn created_time_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " created_time <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn created_time_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " created_time > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn created_time_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " created_time >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_created_time_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND created_time = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_created_time_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND created_time < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_created_time_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND created_time <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_created_time_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND created_time > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_created_time_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND created_time >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_created_time_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR created_time = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_created_time_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR created_time < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_created_time_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR created_time <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_created_time_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR created_time > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_created_time_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR created_time >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn text_body_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " text_body = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn text_body_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " text_body < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn text_body_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " text_body <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn text_body_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " text_body > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn text_body_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " text_body >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_text_body_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND text_body = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_text_body_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND text_body < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_text_body_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND text_body <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_text_body_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND text_body > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_text_body_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND text_body >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_text_body_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR text_body = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_text_body_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR text_body < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_text_body_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR text_body <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_text_body_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR text_body > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_text_body_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR text_body >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

#[derive(Debug, PartialEq, Eq, Clone)]
pub struct User {
    // user
    pub user_cid: u64,
    pub phone_number: String,
    pub pb_data: Vec<u8>,
    pub debug_data: String,
}

impl FromRow for User {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(User {
            user_cid: row.get(0).unwrap_or_default(),
            phone_number: row.get(1).unwrap_or_default(),
            pb_data: row.get(2).unwrap_or_default(),
            debug_data: row.get(3).unwrap_or_default(),
        })
    }
}

impl User {
    pub async fn replace(&self, pool: &Pool) -> Result<User, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.user (user_cid, phone_number, pb_data, debug_data) VALUES (?, ?, ?, ?)";
        let p = Params::Positional(vec![
            self.user_cid.clone().into(),
            self.phone_number.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn replace_dep(&self, pool: &Pool) -> Result<User, MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"REPLACE INTO flip_my.user (user_cid) VALUES (?)";
        let p = Params::Positional(vec![
            self.user_cid.clone().into(),
            self.phone_number.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
        ]);

        conn.exec_iter(query, p).await?;

        let cp = self.clone();

        Ok(cp)
    }

    pub async fn update(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;
        let query = r"UPDATE flip_my.user SET phone_number = ?, pb_data = ?, debug_data = ? WHERE user_cid = ? ";
        let p = Params::Positional(vec![
            self.phone_number.clone().into(),
            self.pb_data.clone().into(),
            self.debug_data.clone().into(),
            self.user_cid.clone().into(),
        ]);

        let qr = conn.exec_iter(query, p).await?;

        Ok(())
    }

    pub async fn delete(&self, pool: &Pool) -> Result<(), MyError> {
        let mut conn = pool.get_conn().await?;

        let query = r"DELETE FROM flip_my.user WHERE user_cid = ? ";
        let p = Params::Positional(vec![self.user_cid.clone().into()]);

        conn.exec_drop(query, p).await?;

        Ok(())
    }
}

#[derive(Default, Debug)]
pub struct UserSelector {
    wheres: Vec<WhereClause>,
    select_cols: Vec<&'static str>,
    order_by: Vec<&'static str>,
    limit: u32,
    offset: u32,
}

impl UserSelector {
    pub fn new() -> Self {
        UserSelector::default()
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_user_cid(&mut self) -> &mut Self {
        self.select_cols.push("user_cid");
        self
    }

    pub fn select_phone_number(&mut self) -> &mut Self {
        self.select_cols.push("phone_number");
        self
    }

    pub fn select_pb_data(&mut self) -> &mut Self {
        self.select_cols.push("pb_data");
        self
    }

    pub fn select_debug_data(&mut self) -> &mut Self {
        self.select_cols.push("debug_data");
        self
    }

    fn _to_cql(&self) -> (String, Vec<Value>) {
        let cql_select = if self.select_cols.is_empty() {
            "*".to_string()
        } else {
            self.select_cols.join(", ")
        };

        let mut cql_query = format!("SELECT {} FROM flip_my.user", cql_select);

        let (cql_where, where_values) = _get_where(self.wheres.clone());

        if where_values.len() > 0 {
            cql_query.push_str(&format!(" WHERE {}", &cql_where));
        }

        if self.order_by.len() > 0 {
            let cql_orders = self.order_by.join(", ");
            cql_query.push_str(&format!(" ORDER BY {}", &cql_orders));
        };

        if self.limit != 0 {
            cql_query.push_str(&format!(" LIMIT {} ", self.limit));
        };

        if self.offset != 0 {
            cql_query.push_str(&format!(" OFFSET {} ", self.offset));
        };

        (cql_query, where_values)
    }

    pub async fn _get_rows_with_size(
        &mut self,
        session: &Pool,
        size: i64,
    ) -> Result<Vec<User>, MyError> {
        let mut conn = session.get_conn().await?;
        let (cql_query, query_values) = self._to_cql();

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn.exec_map(cql_query, p, |obj: User| obj).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &Pool) -> Result<Vec<User>, MyError> {
        self._get_rows_with_size(session, -1).await
    }

    pub async fn get_row(&mut self, session: &Pool) -> Result<User, MyError> {
        let rows = self._get_rows_with_size(session, 1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound),
        }
    }

    // Modifiers

    pub fn order_by_user_cid_asc(&mut self) -> &mut Self {
        self.order_by.push("user_cid ASC");
        self
    }

    pub fn order_by_user_cid_desc(&mut self) -> &mut Self {
        self.order_by.push("user_cid DESC");
        self
    }

    pub fn order_by_phone_number_asc(&mut self) -> &mut Self {
        self.order_by.push("phone_number ASC");
        self
    }

    pub fn order_by_phone_number_desc(&mut self) -> &mut Self {
        self.order_by.push("phone_number DESC");
        self
    }

    pub fn order_by_debug_data_asc(&mut self) -> &mut Self {
        self.order_by.push("debug_data ASC");
        self
    }

    pub fn order_by_debug_data_desc(&mut self) -> &mut Self {
        self.order_by.push("debug_data DESC");
        self
    }

    pub fn user_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn user_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: " user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_user_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "AND user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_eq(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_lt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_le(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_gt(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_user_cid_ge(&mut self, val: u64) -> &mut Self {
        let w = WhereClause {
            condition: "OR user_cid >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_phone_number_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR phone_number >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: " debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn and_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "AND debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_eq(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data = ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_lt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data < ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_le(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data <= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_gt(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data > ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    pub fn or_debug_data_ge(&mut self, val: &str) -> &mut Self {
        let w = WhereClause {
            condition: "OR debug_data >= ?".to_string(),
            args: val.into(),
        };
        self.wheres.push(w);
        self
    }

    //{* .GetRustWhereInsTmplOut *}
}

///////////////// SHARED CODE ///////////
#[derive(Debug, Clone)]
pub struct WhereClause {
    // pub condition: &'static str,
    pub condition: String,
    pub args: Value,
}

fn _get_where(wheres: Vec<WhereClause>) -> (String, Vec<Value>) {
    let mut values = vec![];
    let mut where_str = vec![];

    for w in wheres {
        where_str.push(w.condition);
        values.push(w.args)
    }
    let cql_where = where_str.join(" ");

    (cql_where, values)
}

#[derive(Debug)]
pub enum MyError {
    // MySQL Error
    NotFound,
    MySqlError(mysql_async::Error),
}

impl From<mysql_async::Error> for MyError {
    fn from(err: mysql_async::Error) -> Self {
        MyError::MySqlError(err)
    }
}

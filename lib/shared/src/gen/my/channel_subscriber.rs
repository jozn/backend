// DO NOT MODIFY AUTO-GENERATED BY PB-WALKER
use mysql_async::prelude::*;
use mysql_async::{FromRowError, OptsBuilder, Params, Row, Pool};
use mysql_common::row::ColumnIndex;

use mysql_common::value::Value;
use crate::mysql_shared::*;

#[derive(Default, Clone, PartialEq, Eq, Debug)]
pub struct ChannelSubscriber  { // channel_subscriber
    pub channel_cid: u64,
    pub profile_cid: u64,
    pub subscriber_gid: u64,
}

impl FromRow for ChannelSubscriber {
    fn from_row_opt(row: Row) -> Result<Self, FromRowError>
    where
        Self: Sized,
    {
        Ok(ChannelSubscriber  {
            channel_cid: row.get(0).unwrap_or_default(),
            profile_cid: row.get(1).unwrap_or_default(),
            subscriber_gid: row.get(2).unwrap_or_default(),
        })
    }
}

impl ChannelSubscriber {
    pub async fn insert(&self, spool: &SPool) -> Result<ChannelSubscriber,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"INSERT INTO {:}.channel_subscriber (channel_cid, profile_cid, subscriber_gid) VALUES (?, ?, ?)",&spool.database);
        let p = Params::Positional(vec![self.channel_cid.clone().into(), self.profile_cid.clone().into(), self.subscriber_gid.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    // [[ for template: this code is copy of insert with 'insert' changed to 'replace' ]]
    pub async fn replace(&self, spool: &SPool) -> Result<ChannelSubscriber,MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"REPLACE INTO {:}.channel_subscriber (channel_cid, profile_cid, subscriber_gid) VALUES (?, ?, ?)",&spool.database);
        let p = Params::Positional(vec![self.channel_cid.clone().into(), self.profile_cid.clone().into(), self.subscriber_gid.clone().into()]);

        conn.exec_iter(
            query, p
        ).await?;

        let cp = self.clone();
        Ok(cp)
    }

    pub async fn update(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;
        let query = format!(r"UPDATE `{:}`.channel_subscriber` SET  WHERE channel_cid = ? AND profile_cid = ? AND subscriber_gid = ? ", &spool.database);
        let p = Params::Positional(vec![ self.channel_cid.clone().into(), self.profile_cid.clone().into(), self.subscriber_gid.clone().into() ]);

        let qr = conn.exec_iter(
            query, p
        ).await?;

        Ok(())
    }

    pub async fn delete(&self, spool: &SPool) -> Result<(),MyError> {
        let mut conn = spool.pool.get_conn().await?;

        let query = format!(r"DELETE FROM `{:}`.channel_subscriber` WHERE channel_cid = ? AND profile_cid = ? AND subscriber_gid = ? ", &spool.database);
        let p = Params::Positional(vec![self.channel_cid.clone().into(), self.profile_cid.clone().into(), self.subscriber_gid.clone().into()]);

        conn.exec_drop(
            query, p
        ).await?;

        Ok(())
    }
}


#[derive(Default, Debug)]
pub struct ChannelSubscriberSelector {
    q: TQuery
}

impl ChannelSubscriberSelector {
    pub fn new() -> Self {
        ChannelSubscriberSelector{
            q: TQuery{
                table: "channel_subscriber",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub fn offset(&mut self, size: u32) -> &mut Self {
        self.q.offset = size;
        self
    }

    pub fn select_all(&mut self) -> &mut Self {
        // Default is select *
        self
    }

    //each column select
    pub fn select_channel_cid(&mut self) -> &mut Self {
        self.q.select_cols.push("channel_cid");
        self
    }
    
    pub fn select_profile_cid(&mut self) -> &mut Self {
        self.q.select_cols.push("profile_cid");
        self
    }
    
    pub fn select_subscriber_gid(&mut self) -> &mut Self {
        self.q.select_cols.push("subscriber_gid");
        self
    }
    

    pub async fn _get_rows_with_size(&mut self, session: &SPool, size: i64) -> Result<Vec<ChannelSubscriber>, MyError>   {
        let mut conn = session.pool.get_conn().await?;
        let(cql_query, query_values) = self.q._to_sql_selector(&session.database);

        println!("{} - {:?}", &cql_query, &query_values);

        let p = Params::Positional(query_values);

        let query_result = conn
            .exec_map(
                cql_query,p,
                |obj: ChannelSubscriber| obj
            ).await?;

        Ok(query_result)
    }

    pub async fn get_rows(&mut self, session: &SPool) -> Result<Vec<ChannelSubscriber>, MyError>{
        self._get_rows_with_size(session,-1).await
    }

    pub async fn get_row(&mut self, session: &SPool) -> Result<ChannelSubscriber, MyError>{
        let rows = self._get_rows_with_size(session,1).await?;

        let opt = rows.get(0);
        match opt {
            Some(row) => Ok(row.to_owned()),
            None => Err(MyError::NotFound)
        }
    }

    // Modifiers
    
    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid ASC");
        self
    }

	pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_subscriber_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid ASC");
        self
    }

	pub fn order_by_subscriber_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid DESC");
        self
    }

    
    pub fn channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Updater

#[derive(Default, Debug)]
pub struct ChannelSubscriberUpdater {
    q: TQuery
}

impl ChannelSubscriberUpdater {
    pub fn new() -> Self {
        ChannelSubscriberUpdater{
            q: TQuery{
                table: "channel_subscriber",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    //each column delete
    pub fn set_channel_cid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("channel_cid",val.into());
        self
    }
    
    pub fn set_profile_cid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("profile_cid",val.into());
        self
    }
    
    pub fn set_subscriber_gid(&mut self, val :u64) -> &mut Self {
        self.q.updates.insert("subscriber_gid",val.into());
        self
    }
    

    pub async fn update(&mut self, session: &SPool) -> Result<(),MyError> {
        update_rows(&self.q, session).await
    }

    
    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid ASC");
        self
    }

	pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_subscriber_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid ASC");
        self
    }

	pub fn order_by_subscriber_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid DESC");
        self
    }

    
    pub fn channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

// Deleter

#[derive(Default, Debug)]
pub struct ChannelSubscriberDeleter {
    q: TQuery
}

impl ChannelSubscriberDeleter {
    pub fn new() -> Self {
        ChannelSubscriberDeleter{
            q: TQuery{
                table: "channel_subscriber",
                ..Default::default()
            }
        }
    }

    pub fn limit(&mut self, size: u32) -> &mut Self {
        self.q.limit = size;
        self
    }

    pub async fn delete(&mut self, session: &SPool) -> Result<(),MyError> {
        delete_rows(&self.q, session).await
    }

    
    pub fn order_by_channel_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid ASC");
        self
    }

	pub fn order_by_channel_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("channel_cid DESC");
        self
    }

    pub fn order_by_profile_cid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid ASC");
        self
    }

	pub fn order_by_profile_cid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("profile_cid DESC");
        self
    }

    pub fn order_by_subscriber_gid_asc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid ASC");
        self
    }

	pub fn order_by_subscriber_gid_desc(&mut self) -> &mut Self {
		self.q.order_by.push("subscriber_gid DESC");
        self
    }

    
    pub fn channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_channel_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR channel_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_profile_cid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR profile_cid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: " subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn and_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "AND subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_eq (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid = ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_lt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid < ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_le (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid <= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_gt (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid > ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    pub fn or_subscriber_gid_ge (&mut self, val: u64 ) -> &mut Self {
        let w = WhereClause{
            condition: "OR subscriber_gid >= ?".to_string(),
            args: val.into(),
        };
        self.q.wheres.push(w);
        self
    }

    
    pub fn channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_channel_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR channel_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_profile_cid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR profile_cid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!(" subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn and_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("AND subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

    pub fn or_subscriber_gid_in (&mut self, val: Vec<u64> ) -> &mut Self {
		let len = val.len();
        if len == 0 {
            return self
        }

        let mut marks = "?,".repeat(len);
        marks.remove(marks.len()-1);

		let arr = val.iter().map(|v|v.into()).collect();

        let w = WhereInClause{
			condition: format!("OR subscriber_gid IN ({})", marks),
            args: arr,
        };
        self.q.wheres_ins.push(w);
        self
    }

}

pub async fn channel_subscriber_mass_insert(arr :&Vec<ChannelSubscriber>, spool: &SPool) -> Result<(),MyError> {
    let mut conn = spool.pool.get_conn().await?;
    if arr.len() == 0 {
        return Err(MyError::EmptySql)
    }
     let mut insert_fields = "(channel_cid, profile_cid, subscriber_gid)";

     let mut vals_str = "(?, ?, ?), ".repeat(arr.len());
    let vals_str = &vals_str[0..(vals_str.len()-2)];

    let query = format!(r"INSERT INTO {:}.tweet {:} VALUES {:}", &spool.database, insert_fields, vals_str);

    let mut arr_vals = vec![];
    for ar in arr {
        arr_vals.push(ar.channel_cid.clone().into());
        arr_vals.push(ar.profile_cid.clone().into());
        arr_vals.push(ar.subscriber_gid.clone().into());}

    let p = Params::Positional(arr_vals);

    println!("{} - {:?}", &query, &p);

    let qr = conn.exec_iter(
        query, p
    ).await?;

    Ok(())
}

// Index
pub async fn get_channel_subscriber(channel_cid: u64,profile_cid: u64,subscriber_gid: u64, spool: &SPool) -> Result<ChannelSubscriber,MyError> {
	let m = ChannelSubscriberSelector::new()
		.channel_cid_eq(channel_cid)
		.and_profile_cid_eq(profile_cid)
		.and_subscriber_gid_eq(subscriber_gid)
		.get_row(spool).await?;
	Ok(m)
}
